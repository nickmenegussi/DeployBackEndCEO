CREATE DATABASE CEO;
USE CEO;

-- Tabela User (BASE)
CREATE TABLE User (
    idUser INT AUTO_INCREMENT PRIMARY KEY,
    nameUser VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    image_profile TEXT,
    status_permission ENUM('SuperAdmin','admin','User') DEFAULT 'User',
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Category (PRIMEIRO - para usar como FK)
CREATE TABLE Category(
    idCategory INT AUTO_INCREMENT PRIMARY KEY,
    nameCategory VARCHAR(100) NOT NULL,
    User_idUser INT NOT NULL,
    create_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela Book
CREATE TABLE Book (
    idLibrary INT AUTO_INCREMENT PRIMARY KEY,
    nameBook VARCHAR(255) NOT NULL,
    authorBook VARCHAR(255) NOT NULL,
    image TEXT,
    overviewBook TEXT NOT NULL,
    curiosityBook TEXT,
    tagsBook ENUM('Obras Básicas','Obras Complementares') NOT NULL,
    bookCategory ENUM('reserva','emprestimo') NOT NULL,
    bookQuantity INT DEFAULT 1,
    date_aquisition DATETIME DEFAULT CURRENT_TIMESTAMP,
    status_Available ENUM('disponível','reservado','emprestado','indisponível') DEFAULT 'disponível'
);

-- Tabela Topic (AGORA COM FK CORRETA)
CREATE TABLE Topic (
    idTopic INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    image TEXT,
    User_idUser INT NOT NULL,
    Category_id INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Category_id) REFERENCES Category(idCategory)
);

-- Tabela Post
CREATE TABLE Post (
    idPost INT AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL,
    title VARCHAR(255) NOT NULL,
    image TEXT,
    User_idUser INT NOT NULL,
    Topic_idTopic INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Topic_idTopic) REFERENCES Topic(idTopic)
);

-- Tabela Comments
CREATE TABLE Comments (
    idComments INT AUTO_INCREMENT PRIMARY KEY,
    Post_idPost INT NOT NULL,
    User_idUser INT NOT NULL,
    message TEXT NOT NULL,
    createdDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Post_idPost) REFERENCES Post(idPost) ON DELETE CASCADE,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser) ON DELETE CASCADE
);

-- Tabela Likes
CREATE TABLE Likes (
    idLikes INT AUTO_INCREMENT PRIMARY KEY,
    Post_idPost INT NOT NULL,
    User_idUser INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Post_idPost) REFERENCES Post(idPost) ON DELETE CASCADE,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser) ON DELETE CASCADE,
    UNIQUE KEY unique_like (Post_idPost, User_idUser)
);

-- Tabela Cart (CARRINHO TEMPORÁRIO)
CREATE TABLE Cart (
    idCart INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    Book_idLibrary INT NOT NULL,
    action ENUM('reservar','emprestar') NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Book_idLibrary) REFERENCES Book(idLibrary)
);

-- Tabela Loans (EMPRÉSTIMOS - CONFIRMADOS)
CREATE TABLE Loans (
    idLoans INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    Book_idLibrary INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    returnDate DATETIME NOT NULL,
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'returned', 'overdue') DEFAULT 'active',
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Book_idLibrary) REFERENCES Book(idLibrary)
);

-- Tabela Reserves (RESERVAS - CONFIRMADAS) - AGORA IGUAL A LOANS
CREATE TABLE Reserves (
    idReserved INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    Book_idLibrary INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    reserveDate DATETIME NOT NULL,
    expirationDate DATETIME NOT NULL,
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'expired', 'cancelled') DEFAULT 'active',
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Book_idLibrary) REFERENCES Book(idLibrary)
);

-- Tabela Favorite
CREATE TABLE Favorite (
    idFavorite INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    Book_idLibrary INT NOT NULL,
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Book_idLibrary) REFERENCES Book(idLibrary),
    UNIQUE KEY unique_favorite (User_idUser, Book_idLibrary)
);

-- Tabela Lecture
CREATE TABLE Lecture (
    idLecture INT AUTO_INCREMENT PRIMARY KEY,
    nameLecture VARCHAR(255) NOT NULL,
    dateLecture DATETIME NOT NULL,
    timeLecture TIME NOT NULL,
    description VARCHAR(255) NOT NULL,
    link_url VARCHAR(255),
    video_url TEXT,
    yearOfPublication INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Notifications
CREATE TABLE Notifications (
    idNotifications INT AUTO_INCREMENT PRIMARY KEY,
    message VARCHAR(255) NOT NULL,
    isRead BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    User_idUser INT NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela OTP
CREATE TABLE OTP (
    idOtp INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    otp VARCHAR(10) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expiresAt TIMESTAMP NOT NULL,
    INDEX idx_email (email),
    INDEX idx_expires (expiresAt)
);

-- Tabela VolunteerWork
CREATE TABLE VolunteerWork (
    idVolunteerWork INT AUTO_INCREMENT PRIMARY KEY,
    nameVolunteerWork VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    dateVolunteerWork DATETIME NOT NULL,
    work_description TEXT NOT NULL,
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Facilitadores
CREATE TABLE Facilitadores (
    idFacilitadores INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    description TEXT NOT NULL,
    apelido VARCHAR(255) NOT NULL,
    espiritaSinceTime INT NOT NULL,
    memberSinceWhen DATETIME,
    category ENUM('ESDE','CIEDE','MEDIUNIDADE') NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    UNIQUE KEY unique_facilitador (User_idUser)
);

-- Tabela GroupOfstudy
CREATE TABLE GroupOfstudy(
    IdGroupOfStudy BIGINT AUTO_INCREMENT PRIMARY KEY,
    IdFacilitador INT NOT NULL,
    NameStudy VARCHAR(255) NOT NULL,
    Description VARCHAR(255) NOT NULL,
    DayOfWeek VARCHAR(20),
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    TypeGroup ENUM('ESDE', 'MEDIUNICO', 'EVANGELIZACAO', 'CIEDE', 'OUTROS'),
    Requirements TEXT,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdFacilitador) REFERENCES Facilitadores(idFacilitadores)
);

-- Tabela ReviewSociety
CREATE TABLE ReviewSociety (
    idReviewSociety INT AUTO_INCREMENT PRIMARY KEY,
    descriptionReview TEXT NOT NULL,
    ratingReview INT NOT NULL CHECK (ratingReview BETWEEN 1 AND 5),
    userId INT NOT NULL,
    create_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES User(idUser)
);

-- Tabela CalendarEvents
CREATE TABLE CalendarEvents (
    idCalendarEvents INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    link VARCHAR(255),
    description TEXT NOT NULL,
    start DATETIME NOT NULL,
    end DATETIME NOT NULL,
    attachment TEXT,
    dateEvent DATETIME NOT NULL,
    User_idUser INT NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);